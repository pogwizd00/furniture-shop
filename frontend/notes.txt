1. React props: i can include props inside a curly braces, create sth like
Header.defaultProps={
  title: "Miał" // this is defauly props when i dont sent anything to props
}

i can declare type of variable when i import propTypes in a component and below
our render component i have to use:

nameComponent.propTypes={
    title: PropTypes.string
    title: PropTypes.string.isRequired // it means that i have to pass props string

}
if i want to take props from one file.tsx and usinf this in another i have
to use dulbe curly braces like this {{title, color}} and i can use it inside
a render component

2. CSS in react
    a. I can do it inline - pls dont use it
    b. i can create variable below render component like:
        const headingStyle={
            color: 'red',
            backgroundColor: 'black',
        }
    and using this insilde inline like <h2 style={headingStyle}>title<h2/>
    c. Better opoiotn is using dynamic styling(create file.css which you import
        to tsx file )
3. Event:
    a. onClick - i can use it like a prop which could be pass to doffrent component inside after a click
    a button or something
4. crate a list with map when i have array of object like that:
    const tasks=[
        {
            id:1,
            text: "foodShiping",
            day: "Feb 5th at 2:30pm",
            reminder: false,
        }
        ...
    ]

    inside a component using map and creating list:

    <>
        {tasks.map((task)=>(<h3 key={task.id}>{task.text}</h3>))}
    </>

5. using hooks useState inside a function( when i use useState i can use array
    of object or sth inside a componet - good to use, and use setTasks add new object)
    // import {useState} from 'react'
    const [tasks,setTasks] = useState(outArray in advance ^) advance=z góry
    // better is using our small database which is array of object in a App.tsx
    // because it should be visible in our entire app, and when we want to using
    // one of the object from array in object in our component Tasks we have to
    // sent our array in props
6. i can use react icons from react-icons which i have to install using npm i react-icons
    after import and installed react icons i have restart server :
    // import {FaTimes} from 'react-icons/fa' fa means font awesome
7. create delete task // user props to delete !
    every funconality should be in main App.tsx like delete, add or sth

8. Toggle Reminder - doing somethig when i do somethink on object  for example
    doubleClick and after that in a console we will se id of object
9. !!!!! Worth to know !!!!!
    i can add class name to object inline like this:

        className={`task ${task.reminder ? 'reminder' : ""}`} - mindFuck but very useFull and look smart XD

        <div
              className={`task ${task.reminder && 'reminder'}`}
              onDoubleClick={() => onToggle(task.id)}
            >

10. Add form in react !!!! example of form in react, it can have name AddTask
    1:06 min traversymedia CrashCourse
11. Another important thing to do is that i can use useState like a condition to
    show sth for example addForm to add new task. I can use operand && to create
    condition

    // it was declare below App render. This is useState for AddButton
    const [showAddTask, setShowAddTask] = useState(false)

    //this is out condition
    {showAddTask && <AddTask onAdd={addTask} />}

    another good practise to use condition inline a component when its true or
    false

    <Button
              color={showAdd ? 'red' : 'black'}
              text={showAdd ? 'Close' : 'Add'}
              onClick={onAdd}
            />
12 Build for produciotn 1:19 traversyMedia - immportant knowladge !
13 Create server json to use database in ale display tasks on the screen 1:21
14 in format json keys have to be in double quotes "id" and value too
    has to be inside a double quotes
15. How to fetch data from backed, from our database
    a. using useEffect - its another hook
16. If i Want to delete sth from server 1:30
17. Using react-router-dom !!! very important
    a. import necessary lib
    b. for each element in a navBar i have to create component and after it
        i have to create link to that components
18. I can use useLocation hook from react-router-dom. It allows us to look at the
    route where the currently on !

    if I want to add some condition to component i have put my component inside
    a curly braces and before the component a put condition for example:



    {location.pathname === '/' && (
            <Button
              color={showAdd ? 'red' : 'black'}
              text={showAdd ? 'Close' : 'Add'}
              onClick={onAdd}
            />
          )}
19. Another hook to learn is useParams

                    "useEffect"

20. useEffect hooka mozemy uzywac gdy chcemy aby był tylko
    uruchamiany w momencie gdy dana wartosc jest zmieniana, przesylanie
    za pomoca props ... ,[wartosc]). Ale moze tez uruchamiany tylko raz.
    Łatwiejsze rozumienie hooka useEffect mozna porownac to tak zwanego
    addEventListener. W celu wywowalania hooka useEffect tylko raz
    w momencie kiedy przegladarka sie przeladowuje trzeba go zainicjowac pustą
    tablicą "array" ... , [])

21. Przy pomocu hooka useEffect mozna czyścić wczesniej uzywane zależności
    na przyklad po kliknieciu przycisku ktory ma wyswietlac dany komponent,
    który również był komponentem funkcjionalnym i żeby usunąć funcjonalnmości
    tego komponentu to wewnątrz hook'a useEffect tworzymy returna i wewnątrz niego
    usówamy zależności componentu który po kliknieciu staje się niewidoczny

22. Zawsze kiedy uzywamu useEffect musimy być czujni w odeniesieniu do zależności,
    pomiedzy zmiennymi jakie wykorzystujemy. Musimy przeanalizowac czuy nasz hook,
    useEffect powinien wykonac sie raz przy rendorowaniu strony czy powinien zostac wykonywany
    przy kazdorazowym zmianie wartości.

23. Fetching Data from API: Uzywajac useEffect oraz useState do fetchowania danych
    z bazydanych zazwyczaj chcemy aby pobieranie danych wykonało sie tylko raz dlatego tez
    musimy w useEffect dac pusta tablice dependecnis aby to sie wykonalo tylko raz.
    ..., []). Do fetchownia danych z endPointa mozna uzyc biobiotegi axios lub ky.
    do zapytac typu post,get,delete,put,patch

24. W fajny sposob mozna uzyc tekst inputa oraz useEffecta aby z danych ktore zostaly pobrane z bazy
    wystiwetlic tylko rekord ktoreg id sie podało do tekstinputa

25. Kolejnym fajnym zastosowaniem jest uzycie buttona do zatwierdzania ktory rekord o id podanym w textinpucie
    chcemy wyciagnac, wszystko korzystajac z useEffecta oraz useStata odc 14


                       "useContext"

26. hook Context tworzymy za pomoca exportowania z jakiegos komponentu
    wartości do komponentow które w hierarchi drzewa pod tym componentem
    są w duzej odleglosci i problematyczne by było przesylanie z componenta do
    komponenta w propsach tej jednej wartości. W takim przypradkach uzywamy Contexta.
    A dokaldnie useContext. Przydatny hook dzieki ktoremy mozemy wykorzystac wartości
    z componentow rodziców w componentach pochodnych.


                        "useReducer"

27. useReducer jest to hook ktory jest podobny do useState.
    Również slozu do zarzadzania stanem.

28. useReducer jest to hook który zmieenia aktualny stan.
    jako parametry przyjmuje useReducer(reducer, initialState)
    reducer jest to funckja ktorej zadaniem jest wykonanie akcji
    na aktualnym stanie reduce(currentState, action);

29. Przykladem wykorzystania useReducer jest na przyklad stworzenie
    zwyklego conutera ktory odejmuje, dodaje, resetuje wartosc, uzywajac
    switch case. przydatny hook, odcinek 19

30. za pomoca reduce mozna dokonowac modyfikacji na obiektach
    Mozna wykorzystac tą samą funckje reduce(currentState, action) do
    zmiany stanu innego local/global state.

31. hook'a useReducer mozna wykorzystywac z useContext w celu przesylania
    calej funkcjonalności (np. Countera) pomiedzy componentami w hierarchii
    drzewa naszego projektu. odcinek 23

32. Lepiej jest uzyc useReduce do obiektow a do typów prymitywnych useState.
    useReduce uzywamy gdy chcemy aby nasza managment state była globalna, natomiast
    useStete w momencie gdy chemy aby nasza state była w zakresie lokalnym
